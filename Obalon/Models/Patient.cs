//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Obalon.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;

    public partial class Patient
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Patient()
        {
            this.Events = new HashSet<Event>();
        }

        public int PatientId { get; set; }
        public int DoctorId { get; set; }
        public bool Gender { get; set; }
        public Nullable<int> Age { get; set; }
        public Nullable<int> HeightFt { get; set; }
        public Nullable<int> HeightIn { get; set; }

        [NotMapped]
        public int LastSeen { get; set; }

        [NotMapped]
        public int Status { get; set; }

        [NotMapped]
        public int WeightLoss { get; set; }

        [NotMapped]
        public int TotalBodyLoss { get; set; }

        [NotMapped]
        public int BMIChange { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Event> Events { get; set; }

        [NotMapped]
        public int LastUserEventType
        {
            get
            {
                try
                {
                    using (var db = new Models.ObalonEntities())
                    {
                        Event eve = (from ev in db.Events
                                     where (ev.PatientId == this.PatientId && ev.EventType.IsRoutineAction == false)
                                     orderby ev.EventId descending
                                     select ev).SingleOrDefault();
                        return eve != null ? eve.EventTypeId : -1;
                    }
                }
                catch (System.Exception ex)
                {

                }
                return -1;
            }
        }
    }
}
